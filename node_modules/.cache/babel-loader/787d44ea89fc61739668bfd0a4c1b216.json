{"ast":null,"code":"import { call, takeEvery, takeLatest, all, delay, fork, put } from 'redux-saga/effects';\nimport { getProductsSuccess, getProductsFailed } from './actions';\nimport { GET_PRODUCTS_REQUEST } from './constants';\nimport { getProductsApi } from './service';\n\nfunction* getProductsProcess(params) {\n  try {\n    const respon = yield call(getProductsApi);\n    console.log('ressss', respon);\n\n    if (respon.status === 200) {\n      yield put(getProductsSuccess(respon.data)); // dispatch action to reducer\n    } else {\n      yield put(getProductsFailed());\n    }\n  } catch (err) {\n    yield put(getProductsFailed());\n  }\n}\n\nfunction* watchGetProducts() {\n  yield takeLatest(GET_PRODUCTS_REQUEST, getProductsProcess);\n}\n\nfunction* watchProductsAll() {\n  yield all([watchProductsProduct()]);\n  console.log('call saga');\n}\n\nexport default watchProductsAll;","map":{"version":3,"sources":["D:/Tai lieu/ReactJS/shop-clothes - Copy/src/container/Product/saga.js"],"names":["call","takeEvery","takeLatest","all","delay","fork","put","getProductsSuccess","getProductsFailed","GET_PRODUCTS_REQUEST","getProductsApi","getProductsProcess","params","respon","console","log","status","data","err","watchGetProducts","watchProductsAll","watchProductsProduct"],"mappings":"AAAA,SACEA,IADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,GAJF,EAKEC,KALF,EAMEC,IANF,EAOEC,GAPF,QAQO,oBARP;AASA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,WAAtD;AACA,SAASC,oBAAT,QAAqC,aAArC;AACA,SAASC,cAAT,QAA+B,WAA/B;;AACA,UAAUC,kBAAV,CAA6BC,MAA7B,EAAqC;AACnC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMb,IAAI,CAACU,cAAD,CAAzB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;;AACA,QAAIA,MAAM,CAACG,MAAP,KAAkB,GAAtB,EAA2B;AACzB,YAAMV,GAAG,CAACC,kBAAkB,CAACM,MAAM,CAACI,IAAR,CAAnB,CAAT,CADyB,CAEzB;AACD,KAHD,MAGM;AACJ,YAAMX,GAAG,CAACE,iBAAiB,EAAlB,CAAT;AACD;AACF,GATD,CASE,OAAOU,GAAP,EAAY;AACZ,UAAMZ,GAAG,CAACE,iBAAiB,EAAlB,CAAT;AACD;AACF;;AACD,UAAUW,gBAAV,GAA6B;AAC3B,QAAMjB,UAAU,CAACO,oBAAD,EAAuBE,kBAAvB,CAAhB;AACD;;AACD,UAAUS,gBAAV,GAA6B;AAC3B,QAAMjB,GAAG,CAAC,CAACkB,oBAAoB,EAArB,CAAD,CAAT;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;;AACD,eAAeK,gBAAf","sourcesContent":["import {\r\n  call,\r\n  takeEvery,\r\n  takeLatest,\r\n  all,\r\n  delay,\r\n  fork,\r\n  put\r\n} from 'redux-saga/effects';\r\nimport { getProductsSuccess, getProductsFailed } from './actions';\r\nimport { GET_PRODUCTS_REQUEST } from './constants';\r\nimport { getProductsApi } from './service'\r\nfunction* getProductsProcess(params) {\r\n  try {\r\n    const respon = yield call(getProductsApi);\r\n    console.log('ressss', respon);\r\n    if (respon.status === 200) {\r\n      yield put(getProductsSuccess(respon.data));\r\n      // dispatch action to reducer\r\n    }else {\r\n      yield put(getProductsFailed())\r\n    }\r\n  } catch (err) {\r\n    yield put(getProductsFailed());\r\n  }\r\n}\r\nfunction* watchGetProducts() {\r\n  yield takeLatest(GET_PRODUCTS_REQUEST, getProductsProcess)\r\n}\r\nfunction* watchProductsAll() {\r\n  yield all([watchProductsProduct()]);\r\n  console.log('call saga');\r\n}\r\nexport default watchProductsAll;"]},"metadata":{},"sourceType":"module"}